"""Compute integration of elements on unit sphere

The module mainly supports computing areas and integration of elements on sphere
with high accuracy. The public interface compute_sphere_quadrature is a hybrid method
which will use the best setting automatically to find cell integration and areas.

.. moduleauthor:: Xiangmin Jiao, <xiangmin.jiao@stonybrook.edu>
.. moduleauthor:: Yipeng Li, <yipeng.li@stonybrook.edu>

"""

import math as mt
import numpy as np
import numba


# _TYPE_MAP = [("f4", "i4"), ("f8", "i4"), ("f4", "i8"), ("f8", "i8")]
_TYPE_MAP = [("f8", "i4"), ("f8", "i8")]
NB_OPTS = {"nogil": True}


def compute_sphere_quadrature(xs, elems, h1=0.004, deg1=4, h2=0.05, deg2=8):
    """Find cell integration for test function f on sphere of a mixed mesh.
    It is a hybrid method which will automatically use the best setting.

    Parameters
    ----------
    xs:             n-by-3 array single or double, coordinates of vertices
    elems:          n-by-m array integer, connectivity table
    f_D:            a function handle that takes a coordinate and a value

    Returns
    ----------
    cell_int:       n-by-1 array single or double, integration on elements
    areas:          n-by-1 array single or double, areas of elements
    """

    # radius of the sphere
    r = _compute_norm(xs[0])

    for vid in range(xs.shape[0]):
        assert abs(_compute_norm(xs[vid]) - r) < 2e-6, "The input mesh is not a sphere"

    # initialization
    index = 0
    nf = elems.shape[0]
    nv_surf = elems.shape[1]
    max_nv = max(1000000, nf * 6)

    pnts = [[0] * 3 for pid in range(max_nv)]
    ws = [0 for pid in range(max_nv)]
    offset = [0 for fid in range(nf + 1)]

    # go through all the faces
    for fid in range(nf):
        offset[fid] = index

        nhe = nv_surf - 1
        while elems[fid, nhe] < 0:
            nhe -= 1
        if nhe < 2:
            continue

        # split each element into several spherical triangles
        for j in range(1, nhe):
            lvids = [1, j, j + 1]
            pnts_tri = xs[elems[fid, lvids]] / r
            h = _compute_max_edge_length(pnts_tri)

            # generate quadrature points
            if h < h1:
                index = _quadrature_sphere_tri(
                    pnts_tri, [1, 2, 3], deg1, pnts, ws, index
                )
            elif h < h2:
                index = _quadrature_sphere_tri(
                    pnts_tri, [1, 2, 3], deg2, pnts, ws, index
                )
            else:
                index = _quadrature_sphere_tri_split(
                    pnts_tri, [1, 2, 3], h2, deg2, pnts, ws, index
                )

    pnts = r * pnts[:index]
    ws = (r * r) * ws[:index]
    offset[nf] = index


@numba.njit(["{0}({0}[:])".format("f8")], **NB_OPTS)
def _compute_norm(vec):
    sqnorm = np.float64(0.0)
    for i in range(len(vec)):
        sqnorm += vec[i] * vec[i]
    sqnorm = np.sqrt(sqnorm)
    return sqnorm


@numba.njit(["{0}({0}[:], {0}[:])".format("f8")], **NB_OPTS)
def _compute_dot(vec1, vec2):
    dotprdt = 0
    for i in range(len(vec1)):
        dotprdt += vec1[i] * vec2[i]
    return dotprdt


@numba.njit(["{0}[:]({0}[:], {0}[:])".format("f8")], **NB_OPTS)
def _cross(a, b):
    r"""Cross product axb

    Parameters
    ----------
    a, b: np.ndarray
        nx3 coordinates

    Returns
    -------
    np.ndarray
        The cross product of :math:`\boldsymbol{a}\times\boldsymbol{b}`.
    """

    return np.array(
        [
            a[1] * b[2] - a[2] * b[1],
            a[2] * b[0] - a[0] * b[2],
            a[0] * b[1] - a[1] * b[0],
        ]
    )


@numba.njit(["Tuple((f8[:],f8[:,:]))({0})".format(x) for x in ("i4", "i8")], **NB_OPTS)
def _fe2_quadrule(deg):
    """Quadrature rule used in this function

    Parameters
    ----------
    deg:            integer, degree

    Returns
    ----------
    ws:             n-by-1 array single or double, weights of quadrature points
    cs:             n-by-2 array single or double,
                    natural coordinates of quadrature points
    """
    if deg <= 1:
        ws = np.array([0.5])
        cs = np.array(
            [0.3333333333333333333333333333333, 0.3333333333333333333333333333333]
        )
    elif deg <= 2:
        ws = np.array(
            [
                0.1666666666666666666666666666666,
                0.1666666666666666666666666666666,
                0.1666666666666666666666666666666,
            ]
        )

        cs = np.array(
            [
                [0.6666666666666666666666666666666, 0.1666666666666666666666666666666],
                [0.1666666666666666666666666666666, 0.6666666666666666666666666666666],
                [0.1666666666666666666666666666666, 0.1666666666666666666666666666666],
            ]
        )
    elif deg <= 4:
        ws = np.array(
            [
                0.0549758718276609338191631624501052,
                0.0549758718276609338191631624501052,
                0.0549758718276609338191631624501052,
                0.111690794839005732847503504216561,
                0.111690794839005732847503504216561,
                0.111690794839005732847503504216561,
            ]
        )
        cs = np.array(
            [
                [
                    0.8168475729804585130808570731956,
                    0.0915762135097707434595714634022015,
                ],
                [
                    0.0915762135097707434595714634022015,
                    0.8168475729804585130808570731956,
                ],
                [
                    0.0915762135097707434595714634022015,
                    0.0915762135097707434595714634022015,
                ],
                [
                    0.1081030181680702273633414922339,
                    0.445948490915964886318329253883051,
                ],
                [
                    0.445948490915964886318329253883051,
                    0.1081030181680702273633414922339,
                ],
                [
                    0.445948490915964886318329253883051,
                    0.445948490915964886318329253883051,
                ],
            ]
        )
    elif deg <= 5:
        cs = np.array(
            [
                [0.3333333333333333333333333333333, 0.3333333333333333333333333333333],
                [
                    0.101286507323456338800987361915123,
                    0.101286507323456338800987361915123,
                ],
                [
                    0.79742698535308732239802527616975,
                    0.101286507323456338800987361915123,
                ],
                [
                    0.101286507323456338800987361915123,
                    0.79742698535308732239802527616975,
                ],
                [
                    0.470142064105115089770441209513447,
                    0.470142064105115089770441209513447,
                ],
                [
                    0.059715871789769820459117580973106,
                    0.470142064105115089770441209513447,
                ],
                [
                    0.470142064105115089770441209513447,
                    0.059715871789769820459117580973106,
                ],
            ]
        )
        ws = np.array(
            [
                0.1125,
                0.0629695902724135762978419727500906,
                0.0629695902724135762978419727500906,
                0.0629695902724135762978419727500906,
                0.0661970763942530903688246939165759,
                0.0661970763942530903688246939165759,
                0.0661970763942530903688246939165759,
            ]
        )
    elif deg <= 6:
        cs = np.array(
            [
                [
                    0.063089014491502228340331602870819,
                    0.063089014491502228340331602870819,
                ],
                [
                    0.063089014491502228340331602870819,
                    0.87382197101699554331933679425836,
                ],
                [
                    0.87382197101699554331933679425836,
                    0.063089014491502228340331602870819,
                ],
                [
                    0.24928674517091042129163855310702,
                    0.24928674517091042129163855310702,
                ],
                [
                    0.24928674517091042129163855310702,
                    0.50142650965817915741672289378596,
                ],
                [
                    0.50142650965817915741672289378596,
                    0.24928674517091042129163855310702,
                ],
                [
                    0.053145049844816947353249671631398,
                    0.31035245103378440541660773395655,
                ],
                [
                    0.31035245103378440541660773395655,
                    0.053145049844816947353249671631398,
                ],
                [
                    0.053145049844816947353249671631398,
                    0.63650249912139864723014259441205,
                ],
                [
                    0.63650249912139864723014259441205,
                    0.053145049844816947353249671631398,
                ],
                [
                    0.31035245103378440541660773395655,
                    0.63650249912139864723014259441205,
                ],
                [
                    0.63650249912139864723014259441205,
                    0.31035245103378440541660773395655,
                ],
            ]
        )
        ws = np.array(
            [
                0.025422453185103408460468404553434,
                0.025422453185103408460468404553434,
                0.025422453185103408460468404553434,
                0.05839313786318968301264480569279,
                0.05839313786318968301264480569279,
                0.05839313786318968301264480569279,
                0.041425537809186787596776728210221,
                0.041425537809186787596776728210221,
                0.041425537809186787596776728210221,
                0.041425537809186787596776728210221,
                0.041425537809186787596776728210221,
                0.041425537809186787596776728210221,
            ]
        )
    elif deg <= 7:
        cs = np.array(
            [
                [0.062382265094402118, 0.067517867073916085],
                [0.870099867831681797, 0.062382265094402118],
                [0.067517867073916085, 0.870099867831681797],
                [0.055225456656926611, 0.32150249385198182],
                [0.623272049491092, 0.055225456656926611],
                [0.32150249385198182, 0.623272049491092],
                [0.034324302945097146, 0.66094919618673565],
                [0.304726500868167, 0.034324302945097146],
                [0.66094919618673565, 0.304726500868167],
                [0.51584233435359177, 0.27771616697639178],
                [0.206441498670016, 0.515842334353592],
                [0.27771616697639178, 0.206441498670016],
            ]
        )
        ws = np.array(
            [
                0.026517028157436251,
                0.026517028157436251,
                0.026517028157436251,
                0.043881408714446055,
                0.043881408714446055,
                0.043881408714446055,
                0.028775042784981585,
                0.028775042784981585,
                0.028775042784981585,
                0.067493187009802774,
                0.067493187009802774,
                0.067493187009802774,
            ]
        )
    elif deg <= 8:
        cs = np.array(
            [
                [
                    0.33333333333333333333333333333333,
                    0.33333333333333333333333333333333,
                ],
                [0.1705693077517602066222935014994, 0.1705693077517602066222935014994],
                [0.1705693077517602066222935014994, 0.65886138449647958675541299700121],
                [0.65886138449647958675541299700121, 0.1705693077517602066222935014994],
                [
                    0.050547228317030975458423550596387,
                    0.050547228317030975458423550596387,
                ],
                [
                    0.050547228317030975458423550596387,
                    0.89890554336593804908315289880723,
                ],
                [
                    0.89890554336593804908315289880723,
                    0.050547228317030975458423550596387,
                ],
                [
                    0.45929258829272315602881551450124,
                    0.45929258829272315602881551450124,
                ],
                [
                    0.45929258829272315602881551450124,
                    0.081414823414553687942368970997513,
                ],
                [
                    0.081414823414553687942368970997513,
                    0.45929258829272315602881551450124,
                ],
                [
                    0.72849239295540428124100037918962,
                    0.26311282963463811342178578626121,
                ],
                [
                    0.26311282963463811342178578626121,
                    0.72849239295540428124100037918962,
                ],
                [
                    0.72849239295540428124100037918962,
                    0.0083947774099576053372138345491687,
                ],
                [
                    0.0083947774099576053372138345491687,
                    0.72849239295540428124100037918962,
                ],
                [
                    0.26311282963463811342178578626121,
                    0.0083947774099576053372138345491687,
                ],
                [
                    0.0083947774099576053372138345491687,
                    0.26311282963463811342178578626121,
                ],
            ]
        )
        ws = np.array(
            [
                0.072157803838893584125545555249701,
                0.051608685267359125140895775145648,
                0.051608685267359125140895775145648,
                0.051608685267359125140895775145648,
                0.016229248811599040155462964170437,
                0.016229248811599040155462964170437,
                0.016229248811599040155462964170437,
                0.047545817133642312396948052190887,
                0.047545817133642312396948052190887,
                0.047545817133642312396948052190887,
                0.013615157087217497132422345038231,
                0.013615157087217497132422345038231,
                0.013615157087217497132422345038231,
                0.013615157087217497132422345038231,
                0.013615157087217497132422345038231,
                0.013615157087217497132422345038231,
            ]
        )
    elif deg <= 9:
        cs = np.array(
            [
                [0.33333333333333333, 0.33333333333333333],
                [0.48968251919873762, 0.48968251919873762],
                [0.48968251919873762, 0.02063496160252476],
                [0.02063496160252476, 0.48968251919873762],
                [0.43708959149293663, 0.43708959149293663],
                [0.43708959149293663, 0.125820817014127],
                [0.125820817014127, 0.43708959149293663],
                [0.18820353561903273, 0.18820353561903273],
                [0.62359292876193454, 0.18820353561903273],
                [0.18820353561903273, 0.62359292876193454],
                [0.044729513394452709, 0.044729513394452709],
                [0.910540973211094582, 0.044729513394452709],
                [0.044729513394452709, 0.910540973211094582],
                [0.74119859878449802, 0.036838412054736283],
                [0.036838412054736283, 0.74119859878449802],
                [0.74119859878449802, 0.221962989160765697],
                [0.036838412054736283, 0.221962989160765697],
                [0.221962989160765697, 0.036838412054736283],
                [0.221962989160765697, 0.74119859878449802],
            ]
        )

        ws = np.array(
            [
                0.048567898141399416,
                0.015667350113569535,
                0.015667350113569535,
                0.015667350113569535,
                0.038913770502387139,
                0.038913770502387139,
                0.038913770502387139,
                0.039823869463605126,
                0.039823869463605126,
                0.039823869463605126,
                0.012788837829349015,
                0.012788837829349015,
                0.012788837829349015,
                0.021641769688644688,
                0.021641769688644688,
                0.021641769688644688,
                0.021641769688644688,
                0.021641769688644688,
                0.021641769688644688,
            ]
        )
    elif deg <= 10:
        cs = np.array(
            [
                [
                    0.33333333333333333333333333333333,
                    0.33333333333333333333333333333333,
                ],
                [
                    0.42508621060209057296952951163804,
                    0.42508621060209057296952951163804,
                ],
                [
                    0.42508621060209057296952951163804,
                    0.14982757879581885406094097672391,
                ],
                [
                    0.14982757879581885406094097672391,
                    0.42508621060209057296952951163804,
                ],
                [
                    0.02330886751000019071446638689598,
                    0.02330886751000019071446638689598,
                ],
                [
                    0.02330886751000019071446638689598,
                    0.95338226497999961857106722620804,
                ],
                [
                    0.95338226497999961857106722620804,
                    0.02330886751000019071446638689598,
                ],
                [0.62830740021349255642083766607883, 0.2237669735769730062256864902682],
                [0.2237669735769730062256864902682, 0.62830740021349255642083766607883],
                [
                    0.62830740021349255642083766607883,
                    0.14792562620953443735347584365296,
                ],
                [
                    0.14792562620953443735347584365296,
                    0.62830740021349255642083766607883,
                ],
                [0.2237669735769730062256864902682, 0.14792562620953443735347584365296],
                [0.14792562620953443735347584365296, 0.2237669735769730062256864902682],
                [0.6113138261813976489187550022539, 0.35874014186443146457815530072385],
                [0.35874014186443146457815530072385, 0.6113138261813976489187550022539],
                [
                    0.6113138261813976489187550022539,
                    0.029946031954170886503089697022247,
                ],
                [
                    0.029946031954170886503089697022247,
                    0.6113138261813976489187550022539,
                ],
                [
                    0.35874014186443146457815530072385,
                    0.029946031954170886503089697022247,
                ],
                [
                    0.029946031954170886503089697022247,
                    0.35874014186443146457815530072385,
                ],
                [
                    0.82107206998562937337354441347218,
                    0.14329537042686714530585663061732,
                ],
                [
                    0.14329537042686714530585663061732,
                    0.82107206998562937337354441347218,
                ],
                [0.82107206998562937337354441347218, 0.0356325595875034813205989559105],
                [0.0356325595875034813205989559105, 0.82107206998562937337354441347218],
                [0.14329537042686714530585663061732, 0.0356325595875034813205989559105],
                [0.0356325595875034813205989559105, 0.14329537042686714530585663061732],
            ]
        )

        ws = np.array(
            [
                0.039947252370619853915623522606693,
                0.035561901116188667319645643699329,
                0.035561901116188667319645643699329,
                0.035561901116188667319645643699329,
                0.0041119093452320977593233101812359,
                0.0041119093452320977593233101812359,
                0.0041119093452320977593233101812359,
                0.022715296148085009003536814621966,
                0.022715296148085009003536814621966,
                0.022715296148085009003536814621966,
                0.022715296148085009003536814621966,
                0.022715296148085009003536814621966,
                0.022715296148085009003536814621966,
                0.018679928117152638413118249500988,
                0.018679928117152638413118249500988,
                0.018679928117152638413118249500988,
                0.018679928117152638413118249500988,
                0.018679928117152638413118249500988,
                0.018679928117152638413118249500988,
                0.015443328442281994391256538502314,
                0.015443328442281994391256538502314,
                0.015443328442281994391256538502314,
                0.015443328442281994391256538502314,
                0.015443328442281994391256538502314,
                0.015443328442281994391256538502314,
            ]
        )
    elif deg <= 12:
        cs = np.array(
            [
                [
                    0.48821738977380488256466173878598,
                    0.48821738977380488256466173878598,
                ],
                [
                    0.48821738977380488256466173878598,
                    0.023565220452390234870676522428033,
                ],
                [
                    0.023565220452390234870676522428033,
                    0.48821738977380488256466173878598,
                ],
                [
                    0.43972439229446027297973620450348,
                    0.43972439229446027297973620450348,
                ],
                [
                    0.43972439229446027297973620450348,
                    0.12055121541107945404052759099305,
                ],
                [
                    0.12055121541107945404052759099305,
                    0.43972439229446027297973620450348,
                ],
                [
                    0.27121038501211592234595160781199,
                    0.27121038501211592234595160781199,
                ],
                [
                    0.27121038501211592234595160781199,
                    0.45757922997576815530809678437601,
                ],
                [
                    0.45757922997576815530809678437601,
                    0.27121038501211592234595160781199,
                ],
                [
                    0.12757614554158592467389281696323,
                    0.12757614554158592467389281696323,
                ],
                [
                    0.12757614554158592467389281696323,
                    0.74484770891682815065221436607355,
                ],
                [
                    0.74484770891682815065221436607355,
                    0.12757614554158592467389281696323,
                ],
                [
                    0.021317350453210370246857737134961,
                    0.021317350453210370246857737134961,
                ],
                [
                    0.021317350453210370246857737134961,
                    0.95736529909357925950628452573008,
                ],
                [
                    0.95736529909357925950628452573008,
                    0.021317350453210370246857737134961,
                ],
                [0.11534349453469799916901160654623, 0.2757132696855141939747907691782],
                [0.2757132696855141939747907691782, 0.11534349453469799916901160654623],
                [
                    0.11534349453469799916901160654623,
                    0.60894323577978780685619762427557,
                ],
                [
                    0.60894323577978780685619762427557,
                    0.11534349453469799916901160654623,
                ],
                [0.2757132696855141939747907691782, 0.60894323577978780685619762427557],
                [0.60894323577978780685619762427557, 0.2757132696855141939747907691782],
                [
                    0.022838332222257029610233386418649,
                    0.28132558098993954824813282149259,
                ],
                [
                    0.28132558098993954824813282149259,
                    0.022838332222257029610233386418649,
                ],
                [
                    0.022838332222257029610233386418649,
                    0.69583608678780342214163379208876,
                ],
                [
                    0.69583608678780342214163379208876,
                    0.022838332222257029610233386418649,
                ],
                [
                    0.28132558098993954824813282149259,
                    0.69583608678780342214163379208876,
                ],
                [
                    0.69583608678780342214163379208876,
                    0.28132558098993954824813282149259,
                ],
                [
                    0.11625191590759714124135593566697,
                    0.025734050548330228168108745174704,
                ],
                [
                    0.025734050548330228168108745174704,
                    0.85801403354407263059053531915832,
                ],
                [
                    0.85801403354407263059053531915832,
                    0.025734050548330228168108745174704,
                ],
                [
                    0.11625191590759714124135593566697,
                    0.85801403354407263059053531915832,
                ],
                [
                    0.85801403354407263059053531915832,
                    0.11625191590759714124135593566697,
                ],
            ]
        )

        ws = np.array(
            [
                0.012865533220227667708895587247731,
                0.012865533220227667708895587247731,
                0.012865533220227667708895587247731,
                0.021846272269019201067729355264938,
                0.021846272269019201067729355264938,
                0.021846272269019201067729355264938,
                0.031429112108942550177134995670765,
                0.031429112108942550177134995670765,
                0.031429112108942550177134995670765,
                0.017398056465354471494663093004469,
                0.017398056465354471494663093004469,
                0.017398056465354471494663093004469,
                0.0030831305257795086169334151704928,
                0.0030831305257795086169334151704928,
                0.0030831305257795086169334151704928,
                0.020185778883190464758914841227262,
                0.020185778883190464758914841227262,
                0.020185778883190464758914841227262,
                0.020185778883190464758914841227262,
                0.020185778883190464758914841227262,
                0.020185778883190464758914841227262,
                0.011178386601151722855919352997536,
                0.011178386601151722855919352997536,
                0.011178386601151722855919352997536,
                0.011178386601151722855919352997536,
                0.011178386601151722855919352997536,
                0.011178386601151722855919352997536,
                0.0086581155543294461858209159291448,
                0.0086581155543294461858209159291448,
                0.0086581155543294461858209159291448,
                0.0086581155543294461858209159291448,
                0.0086581155543294461858209159291448,
                0.0086581155543294461858209159291448,
            ]
        )
    else:
        cs = np.array(
            [
                [
                    0.33333333333333333333333333333333,
                    0.33333333333333333333333333333333,
                ],
                [
                    0.49504818493970466551410613458718,
                    0.49504818493970466551410613458718,
                ],
                [
                    0.49504818493970466551410613458718,
                    0.0099036301205906689717877308256304,
                ],
                [
                    0.0099036301205906689717877308256304,
                    0.49504818493970466551410613458718,
                ],
                [
                    0.46871663510957383858305759615608,
                    0.46871663510957383858305759615608,
                ],
                [
                    0.46871663510957383858305759615608,
                    0.062566729780852322833884807687836,
                ],
                [
                    0.062566729780852322833884807687836,
                    0.46871663510957383858305759615608,
                ],
                [
                    0.41452133680127650292770411894038,
                    0.41452133680127650292770411894038,
                ],
                [
                    0.41452133680127650292770411894038,
                    0.17095732639744699414459176211924,
                ],
                [
                    0.17095732639744699414459176211924,
                    0.41452133680127650292770411894038,
                ],
                [
                    0.22939957204283144126863890407517,
                    0.22939957204283144126863890407517,
                ],
                [
                    0.22939957204283144126863890407517,
                    0.54120085591433711746272219184966,
                ],
                [
                    0.54120085591433711746272219184966,
                    0.22939957204283144126863890407517,
                ],
                [
                    0.11442449519632999965001086032284,
                    0.11442449519632999965001086032284,
                ],
                [
                    0.11442449519632999965001086032284,
                    0.77115100960734000069997827935433,
                ],
                [
                    0.77115100960734000069997827935433,
                    0.11442449519632999965001086032284,
                ],
                [
                    0.024811391363458980461148451658982,
                    0.024811391363458980461148451658982,
                ],
                [
                    0.024811391363458980461148451658982,
                    0.95037721727308203907770309668204,
                ],
                [
                    0.95037721727308203907770309668204,
                    0.024811391363458980461148451658982,
                ],
                [
                    0.094853828379578994378640288687166,
                    0.26879499705876077881194860407488,
                ],
                [
                    0.26879499705876077881194860407488,
                    0.094853828379578994378640288687166,
                ],
                [
                    0.094853828379578994378640288687166,
                    0.63635117456166022680941110723796,
                ],
                [
                    0.63635117456166022680941110723796,
                    0.094853828379578994378640288687166,
                ],
                [
                    0.26879499705876077881194860407488,
                    0.63635117456166022680941110723796,
                ],
                [
                    0.63635117456166022680941110723796,
                    0.26879499705876077881194860407488,
                ],
                [
                    0.01810077327880705425651607573572,
                    0.29173006673428778551596130342026,
                ],
                [
                    0.29173006673428778551596130342026,
                    0.01810077327880705425651607573572,
                ],
                [
                    0.01810077327880705425651607573572,
                    0.69016915998690516022752262084402,
                ],
                [
                    0.69016915998690516022752262084402,
                    0.01810077327880705425651607573572,
                ],
                [
                    0.29173006673428778551596130342026,
                    0.69016915998690516022752262084402,
                ],
                [
                    0.69016915998690516022752262084402,
                    0.29173006673428778551596130342026,
                ],
                [
                    0.022233076674090070566811992949056,
                    0.12635738549166876785161724506539,
                ],
                [
                    0.12635738549166876785161724506539,
                    0.022233076674090070566811992949056,
                ],
                [
                    0.022233076674090070566811992949056,
                    0.85140953783424116158157076198556,
                ],
                [
                    0.85140953783424116158157076198556,
                    0.022233076674090070566811992949056,
                ],
                [
                    0.12635738549166876785161724506539,
                    0.85140953783424116158157076198556,
                ],
                [
                    0.85140953783424116158157076198556,
                    0.12635738549166876785161724506539,
                ],
            ]
        )

        ws = np.array(
            [
                0.026260461700400838620392011180488,
                0.0056400726046647664395273501759664,
                0.0056400726046647664395273501759664,
                0.0056400726046647664395273501759664,
                0.01571175918122722544615733095307,
                0.01571175918122722544615733095307,
                0.01571175918122722544615733095307,
                0.023536251252097113664615898114823,
                0.023536251252097113664615898114823,
                0.023536251252097113664615898114823,
                0.023681793268177187316493777028326,
                0.023681793268177187316493777028326,
                0.023681793268177187316493777028326,
                0.015583764522896899256045459475966,
                0.015583764522896899256045459475966,
                0.015583764522896899256045459475966,
                0.0039878857325371862231920366094715,
                0.0039878857325371862231920366094715,
                0.0039878857325371862231920366094715,
                0.018424201364366132610170069259958,
                0.018424201364366132610170069259958,
                0.018424201364366132610170069259958,
                0.018424201364366132610170069259958,
                0.018424201364366132610170069259958,
                0.018424201364366132610170069259958,
                0.0087007316519110832524098255599759,
                0.0087007316519110832524098255599759,
                0.0087007316519110832524098255599759,
                0.0087007316519110832524098255599759,
                0.0087007316519110832524098255599759,
                0.0087007316519110832524098255599759,
                0.0077608934195224551943388438046503,
                0.0077608934195224551943388438046503,
                0.0077608934195224551943388438046503,
                0.0077608934195224551943388438046503,
                0.0077608934195224551943388438046503,
                0.0077608934195224551943388438046503,
            ]
        )
    return ws, cs


def _quadrature_sphere_tri(xs, elems, deg, pnts, ws, index):
    """Find cell integration for test function f on sphere of a mixed mesh.

    Parameters
    ----------
    xs:             n-by-3 array single or double, coordinates of vertices
    elems:          n-by-m array integer, connectivity table
    f_D:            a function handle that takes a coordinate and a value
    deg:            integer, degree

    Returns
    ----------
    cell_int:       n-by-1 array single or double, integration on elements
    areas:          n-by-1 array single or double, areas of elements
    """

    nf = elems.shape[0]
    pnts_q = np.zeros((1, 3))
    ws0, cs0 = _fe2_quadrule(deg)
    nqp = ws0.shape[0]
    # cs=[ones(nqp,1)-cs(:,1)-cs(:,2), cs]
    cs = np.array(
        [
            [1 - cs0[row1, 0] - cs0[row1, 1], cs0[row1, 0], cs0[row1, 1]]
            for row1 in range(nqp)
        ]
    )

    # enlarge the size of quadrature points buffer if inadequate
    if index + nf * nqp > len(ws):
        n_new = 2 * len(ws) + nf * nqp
        ws.resize(n_new, refcheck=False)
        pnts.resize((n_new, 3), refcheck=False)

    for fid in range(nf):
        # absolute value of triple product of x1, x2, x3.
        tri_pro = abs(
            _compute_dot(
                xs[elems[fid, 0]], _cross(xs[elems[fid, 1]], xs[elems[fid, 2]])
            )
        )

        # global coordinate of quadrature points on triangle x1x2x3
        for q in range(nqp):
            pnts_q = (
                cs[q, 0] * xs[elems[fid, 0]]
                + cs[q, 1] * xs[elems[fid, 1]]
                + cs[q, 2] * xs[elems[fid, 2]]
            )

            nrm_q = _compute_norm(pnts_q)
            # project quadrature points on sphere
            pnts[index] = pnts_q / nrm_q
            # weights x Jacobi
            ws[index] = ws0[q] * tri_pro / (nrm_q ** 3)
            index = index + 1

    return index


def _quadrature_sphere_tri_split(xs, elems, tol, deg, pnts, ws, index):
    """Find cell integration for test function f on sphere of a mixed mesh.
    It will split the mesh until we can get to machine precision.

    Parameters
    ----------
    xs:             n-by-3 array single or double, coordinates of vertices
    elems:          n-by-m array integer, connectivity table
    f_D:            a function handle that takes a coordinate and a value
    deg:            integer, degree

    Returns
    ----------
    cell_int:       n-by-1 array single or double, integration on elements
    areas:          n-by-1 array single or double, areas of elements
    """

    nf = elems.shape[0]
    h = _compute_max_edge_length(xs[elems[0]])

    if h > tol:

        # split one element
        surf_fid = np.array([[1, 4, 6], [6, 4, 5], [5, 4, 2], [6, 5, 3]])
        pnts_vor = np.zeros((6, 3), dtype=xs.dtype)

        for fid in range(nf):
            pnts_vor[:4] = xs[elems[fid, :4]]

            # insert points
            for j in range(3):
                index_local = j + 3
                pnts_vor[index_local] = (pnts_vor[j] + pnts_vor[_next_leid(j, 3)]) / 2.0
                pnts_vor[index_local] = pnts_vor[index_local] / _compute_norm(
                    pnts_vor[index_local]
                )

            # recursive
            index = _quadrature_sphere_tri_split(
                pnts_vor, surf_fid, tol, deg, pnts, ws, index
            )
    else:
        index = _quadrature_sphere_tri(xs, elems, deg, pnts, ws, index)

    return index


@numba.njit(["{0}({0}[:,:])".format("f8")], **NB_OPTS)
def _compute_max_edge_length(xs):
    # compute maximum edge length of elements

    return max(
        _compute_norm(xs[0] - xs[1]),
        _compute_norm(xs[1] - xs[2]),
        _compute_norm(xs[2] - xs[0]),
    )


def _next_leid(i, n):
    i = i + 1
    if i == n:
        return 0
    else:
        return i
