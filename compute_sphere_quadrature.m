function [pnts, ws] = compute_sphere_quadrature(xs, surfs)
% This function is used to generate quadrature points and corresponding
% weights on a sphere.
index = 0;
nf = size(surfs, 1);
max_nv = max(1e6, nf*6);
pnts = zeros(max_nv, 3);
ws = zeros(max_nv, 1);
nv_surf = size(surfs, 2);
for fid = 1:nf
    nhe = nv_surf;
    while(surfs(fid, nhe)<=0); nhe = nhe - 1; end
    if(nhe<3); continue; end
    
    for j=2:nhe-1
        lvids = [1, j, j+1];
        pnts_tri = xs(surfs(fid, lvids), :);
        h = max_edge_length(pnts_tri);
        
        if(h<0.004)
            [pnts, ws, index]=quadrature_sphere_tri(...
                pnts_tri, [1,2,3], int32(4), pnts, ws, index);
        elseif(h<0.09)
            [pnts, ws, index]=quadrature_sphere_tri(...
                pnts_tri, [1,2,3], int32(8), pnts, ws, index);
        else
            [pnts, ws, index]=quadrature_sphere_tri_split(...
                pnts_tri, [1,2,3], int32(8), pnts, ws, index);
        end
    end
    
end
pnts = pnts(1:index, :);
ws = ws(1:index, :);
end

function h = max_edge_length(xs)
h = max([norm(xs(1, :) - xs(2, :)), norm(xs(2, :) - xs(3, :)), norm(xs(1, :) - xs(3, :))]);
coder.inline('always');
end

function [pnts, ws, index]=quadrature_sphere_tri(...
    xs, surfs, deg, pnts, ws, index)
% find cell averaged value for test function f on sphere
% of a mixed mesh.


nf = size(surfs, 1);

[ws_q, cs, nqp] = fe2_quadrule(deg);
cs=[ones(nqp,1)-cs(:,1)-cs(:,2), cs];
if(index+nf*nqp>length(ws))
    n_add = length(ws)+nf*nqp;
    ws = [ws; coder.nullcopy(zeros(n_add, 1))];
    pnts = [pnts; coder.nullcopy(zeros(n_add, 3))];
end


for fid=1:nf
    pnts_vor=xs(surfs(fid, :), :);
    
    %absulute value of triple product of x1, x2, x3.
    tri_pro=abs(dot(pnts_vor(1,:),cross(pnts_vor(2,:),pnts_vor(3,:))));
    %global coordinate of quadrature points on triangle x1x2x3
    pnts_q=cs*pnts_vor;
    for k=1:nqp
        nrm_q=norm(pnts_q(k,:));
        index = index+1;
        %project quadrature points on sphere
        pnts(index, :)=pnts_q(k,:)/nrm_q;
        %weights x Jacobi
        ws(index)=ws_q(k)*tri_pro/(nrm_q^3);
    end
end
end

function ii = next_leid(ii, n)

coder.inline('always');
if(ii == n)
    ii = int32(1);
else
    ii = ii + 1;
end
end

function [pnts, ws, index]=quadrature_sphere_tri_split(...
    xs, surfs, deg, pnts, ws, index)
% find cell averaged value for test function f on sphere
% of a mixed mesh.

if(deg>=8); tol = 0.09;
else; tol = 0.004; end

nf = size(surfs, 1);

h = max_edge_length(xs(surfs(1, :), :));


if(h>tol)
    %split one element
surf_fid = [1, 4, 6; 6, 4, 5; 5, 4, 2; 6, 5, 3];
pnts_vor = zeros(6, 3);
    for fid=1:nf
        pnts_vor(1:3, :)=xs(surfs(fid, :), :);
        
        % insert points
        for j = 1:3
            index_local = j+3;
            pnts_vor(index_local, :) = (pnts_vor(j, :) + pnts_vor(next_leid(j, 3), :))/2;
            pnts_vor(index_local, :) = pnts_vor(index_local, :)/norm(pnts_vor(index_local, :));
        end
        
        [pnts, ws, index]=quadrature_sphere_tri_split(...
            pnts_vor, surf_fid, deg, pnts, ws, index);
    end
else
    [pnts, ws, index]=quadrature_sphere_tri(...
        xs, surfs, deg, pnts, ws, index);
end


end

function [ws, cs, nqp] = fe2_quadrule(degree)
% Obtain quadrature points of a 2-D element.
%

if degree<=4
    nqp = int32(6);
    
    ws = [0.0549758718276609338191631624501052;
        0.0549758718276609338191631624501052;
        0.0549758718276609338191631624501052;
        0.111690794839005732847503504216561;
        0.111690794839005732847503504216561;
        0.111690794839005732847503504216561];
    cs = [0.8168475729804585130808570731956, 0.0915762135097707434595714634022015;
        0.0915762135097707434595714634022015, 0.8168475729804585130808570731956;
        0.0915762135097707434595714634022015, 0.0915762135097707434595714634022015;
        0.1081030181680702273633414922339, 0.445948490915964886318329253883051;
        0.445948490915964886318329253883051, 0.1081030181680702273633414922339;
        0.445948490915964886318329253883051, 0.445948490915964886318329253883051];
elseif degree<=8
    nqp = int32(16);
    cs = [0.33333333333333333333333333333333, 0.33333333333333333333333333333333;
        0.1705693077517602066222935014994, 0.1705693077517602066222935014994;
        0.1705693077517602066222935014994, 0.65886138449647958675541299700121;
        0.65886138449647958675541299700121, 0.1705693077517602066222935014994;
        0.050547228317030975458423550596387, 0.050547228317030975458423550596387;
        0.050547228317030975458423550596387, 0.89890554336593804908315289880723;
        0.89890554336593804908315289880723, 0.050547228317030975458423550596387;
        0.45929258829272315602881551450124, 0.45929258829272315602881551450124;
        0.45929258829272315602881551450124, 0.081414823414553687942368970997513;
        0.081414823414553687942368970997513, 0.45929258829272315602881551450124;
        0.72849239295540428124100037918962, 0.26311282963463811342178578626121;
        0.26311282963463811342178578626121, 0.72849239295540428124100037918962;
        0.72849239295540428124100037918962, 0.0083947774099576053372138345491687;
        0.0083947774099576053372138345491687, 0.72849239295540428124100037918962;
        0.26311282963463811342178578626121, 0.0083947774099576053372138345491687;
        0.0083947774099576053372138345491687, 0.26311282963463811342178578626121;
        ];
    ws = [0.072157803838893584125545555249701;
        0.051608685267359125140895775145648;
        0.051608685267359125140895775145648;
        0.051608685267359125140895775145648;
        0.016229248811599040155462964170437;
        0.016229248811599040155462964170437;
        0.016229248811599040155462964170437;
        0.047545817133642312396948052190887;
        0.047545817133642312396948052190887;
        0.047545817133642312396948052190887;
        0.013615157087217497132422345038231;
        0.013615157087217497132422345038231;
        0.013615157087217497132422345038231;
        0.013615157087217497132422345038231;
        0.013615157087217497132422345038231;
        0.013615157087217497132422345038231;...
        ];
else % degree 12
    % D.A. Dunavant, High degree efficient symmetrical Gaussian quadrature
    % rules for the triangle, Internat. J. Numer. Methods Engrg. 21 (1985), 1129--1148.
    nqp = int32(33);
    cs = [0.48821738977380488256466173878598, 0.48821738977380488256466173878598;
        0.48821738977380488256466173878598, 0.023565220452390234870676522428033;
        0.023565220452390234870676522428033, 0.48821738977380488256466173878598;
        0.43972439229446027297973620450348, 0.43972439229446027297973620450348;
        0.43972439229446027297973620450348, 0.12055121541107945404052759099305;
        0.12055121541107945404052759099305, 0.43972439229446027297973620450348;
        0.27121038501211592234595160781199, 0.27121038501211592234595160781199;
        0.27121038501211592234595160781199, 0.45757922997576815530809678437601;
        0.45757922997576815530809678437601, 0.27121038501211592234595160781199;
        0.12757614554158592467389281696323, 0.12757614554158592467389281696323;
        0.12757614554158592467389281696323, 0.74484770891682815065221436607355;
        0.74484770891682815065221436607355, 0.12757614554158592467389281696323;
        0.021317350453210370246857737134961, 0.021317350453210370246857737134961;
        0.021317350453210370246857737134961, 0.95736529909357925950628452573008;
        0.95736529909357925950628452573008, 0.021317350453210370246857737134961;
        0.11534349453469799916901160654623, 0.2757132696855141939747907691782;
        0.2757132696855141939747907691782, 0.11534349453469799916901160654623;
        0.11534349453469799916901160654623, 0.60894323577978780685619762427557;
        0.60894323577978780685619762427557, 0.11534349453469799916901160654623;
        0.2757132696855141939747907691782, 0.60894323577978780685619762427557;
        0.60894323577978780685619762427557, 0.2757132696855141939747907691782;
        0.022838332222257029610233386418649, 0.28132558098993954824813282149259;
        0.28132558098993954824813282149259, 0.022838332222257029610233386418649;
        0.022838332222257029610233386418649, 0.69583608678780342214163379208876;
        0.69583608678780342214163379208876, 0.022838332222257029610233386418649;
        0.28132558098993954824813282149259, 0.69583608678780342214163379208876;
        0.69583608678780342214163379208876, 0.28132558098993954824813282149259;
        0.025734050548330228168108745174704, 0.11625191590759714124135593566697;
        0.11625191590759714124135593566697, 0.025734050548330228168108745174704;
        0.025734050548330228168108745174704, 0.85801403354407263059053531915832;
        0.85801403354407263059053531915832, 0.025734050548330228168108745174704;
        0.11625191590759714124135593566697, 0.85801403354407263059053531915832;
        0.85801403354407263059053531915832, 0.11625191590759714124135593566697];
    
    ws = [0.012865533220227667708895587247731;
        0.012865533220227667708895587247731;
        0.012865533220227667708895587247731;
        0.021846272269019201067729355264938;
        0.021846272269019201067729355264938;
        0.021846272269019201067729355264938;
        0.031429112108942550177134995670765;
        0.031429112108942550177134995670765;
        0.031429112108942550177134995670765;
        0.017398056465354471494663093004469;
        0.017398056465354471494663093004469;
        0.017398056465354471494663093004469;
        0.0030831305257795086169334151704928;
        0.0030831305257795086169334151704928;
        0.0030831305257795086169334151704928;
        0.020185778883190464758914841227262;
        0.020185778883190464758914841227262;
        0.020185778883190464758914841227262;
        0.020185778883190464758914841227262;
        0.020185778883190464758914841227262;
        0.020185778883190464758914841227262;
        0.011178386601151722855919352997536;
        0.011178386601151722855919352997536;
        0.011178386601151722855919352997536;
        0.011178386601151722855919352997536;
        0.011178386601151722855919352997536;
        0.011178386601151722855919352997536;
        0.0086581155543294461858209159291448;
        0.0086581155543294461858209159291448;
        0.0086581155543294461858209159291448;
        0.0086581155543294461858209159291448;
        0.0086581155543294461858209159291448;
        0.0086581155543294461858209159291448];
end
end
